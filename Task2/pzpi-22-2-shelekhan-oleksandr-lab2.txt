Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії
ЗВІТ
з дисципліни "Аналіз та рефакторинг коду"
до лабораторної роботи №2
на тему: "Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (API)"





Виконав ст. гр. ПЗПІ-22-2 
Шелехань Олександр Максимович

Перевірив
Ст. викл. кафедри ПІ 
Сокорчук Ігор Петрович







Харків 2024
МЕТА РОБОТИ
     Розробка бази даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
ХІД РОБОТИ
     Розробка проєкту почалась із побудови UML-діаграми прецедентів, що описує функціональні можливості системи та способи взаємодії користувачів із нею. Дана діаграма представлена у Додатку А.
     На наступному етапі було спроєктовано структуру бази даних та створено ER-діаграму (Додаток Б). На її основі реалізовано схему бази даних у PostgreSQL, що включає всі необхідні таблиці та зв'язки між ними. Візуальна структура бази даних наведена у Додатку В.
     Після цього була розроблена серверна частина проєкту з використанням Python і фреймворку FastAPI. Для роботи з базою даних застосовано SQLAlchemy як ORM, а Alembic використовувався для управління міграціями. Тестування API здійснювалось за допомогою Swagger UI, який автоматично генерується FastAPI (Додаток Г).
     Архітектура системи побудована на основі трирівневого підходу:
     1. Клієнтський рівень: HTTP-запити до API.
     2. Серверний рівень: FastAPI застосунок, який обробляє запити.
     3. Рівень даних: PostgreSQL для зберігання інформації, із застосуванням SQLAlchemy.
     Ключові технічні рішення:
     1. FastAPI був обраний як основний фреймворк через:
– Високу продуктивність і асинхронність;
– Простоту роботи з OpenAPI (Swagger UI);
– Інтеграцію з Pydantic для валідації;
– Гнучкий механізм обробки запитів.
     2. SQLAlchemy забезпечує:
– ORM для зручної роботи з таблицями бази даних;
– Можливість написання складних SQL-запитів;
– Інтеграцію з PostgreSQL.
     3. Alembic використовувався для:
– Створення та управління міграціями бази даних;
– Контролю версій змін у схемі бази даних.
     4. Валідація даних виконувалася на декількох рівнях:
– Pydantic для перевірки вхідних даних у DTO (Data Transfer Object);
– Вбудована валідація на рівні SQLAlchemy моделей (наприклад, унікальність та обов'язковість значень).
     5. PostgreSQL обрано як СУБД через:
– Надійність і стабільність;
– Підтримку складних запитів та реляційної структури даних;
– Масштабованість і відповідність стандартам SQL.
     Розроблений API забезпечує виконання CRUD-операцій (створення, читання, оновлення, видалення даних) та взаємодію з базою даних. Специфікація API представлена у Додатку Г.
     Тестування API здійснювалося за допомогою Swagger UI, що дозволило перевірити коректну роботу всіх ендпоінтів та валідацію даних.
     Ключові фрагменти коду, які демонструють:
     1. Логіку взаємодії серверної частини з базою даних через SQLAlchemy;
     2. Логіку взаємодії серверної частини з клієнтами через FastAPI; наведені в Додатку Д.
     Огляд функціональності системи представлено у відеодемонстрації, посилання на яку наведено у Додатку Е.
ВИСНОВКИ
     У ході виконання роботи було розроблено систему, яка забезпечує взаємодію між клієнтами та базою даних через REST API. Було створено UML-діаграму прецедентів, спроєктовано структуру бази даних і розроблено її ER-діаграму. На основі цих діаграм було реалізовано серверну частину за допомогою FastAPI, SQLAlchemy та Alembic. Також була створена документація API у Swagger UI та виконане тестування системи для перевірки її працездатності.


ДОДАТОК А
UML ДІАГРАМА ПРЕЦЕДЕНТІВ

Рис А - UML діаграма прецедентів


ДОДАТОК Б
ER ДІАГРАМА БАЗИ ДАНИХ

Рис Б - ER діаграма бази даних


ДОДАТОК В
ДІАГРАМА СТРУКТУРИ БАЗИ ДАНИХ

Рис В - Діаграма структури бази даних


ДОДАТОК Г
СПЕЦИФІКАЦІЯ API
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/users/me": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Read Current User",
                "description": "Retrieve the current authenticated user.",
                "operationId": "read_current_user_users_me_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBase"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/users/": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create User",
                "description": "Create a new user.",
                "operationId": "create_user_users__post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/admin": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create Admin User",
                "description": "Create a new admin user.",
                "operationId": "create_admin_user_users_admin_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update User",
                "description": "Update a user.",
                "operationId": "update_user_users__user_id__put",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete User",
                "description": "Delete a user.",
                "operationId": "delete_user_users__user_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "tags": [
                    "login"
                ],
                "summary": "Login For Access Token",
                "description": "Authenticate a user and return an access token.",
                "operationId": "login_for_access_token_token_post",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_login_for_access_token_token_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/properties/": {
            "get": {
                "tags": [
                    "properties"
                ],
                "summary": "Read Properties",
                "description": "Read all properties.",
                "operationId": "read_properties_properties__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Property"
                                    },
                                    "type": "array",
                                    "title": "Response Read Properties Properties  Get"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "properties"
                ],
                "summary": "Create Property",
                "description": "Create a new property.",
                "operationId": "create_property_properties__post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PropertyCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/properties/{property_id}": {
            "get": {
                "tags": [
                    "properties"
                ],
                "summary": "Read Property",
                "description": "Read a property by ID.",
                "operationId": "read_property_properties__property_id__get",
                "parameters": [
                    {
                        "name": "property_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Property Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "properties"
                ],
                "summary": "Update Property",
                "description": "Update an existing property.",
                "operationId": "update_property_properties__property_id__put",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "property_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Property Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PropertyUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "properties"
                ],
                "summary": "Delete Property",
                "description": "Delete a property",
                "operationId": "delete_property_properties__property_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "property_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Property Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/": {
            "post": {
                "tags": [
                    "bookings"
                ],
                "summary": "Create New Booking",
                "operationId": "create_new_booking_bookings__post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookingCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/bookings/{booking_id}": {
            "get": {
                "tags": [
                    "bookings"
                ],
                "summary": "Read Booking",
                "operationId": "read_booking_bookings__booking_id__get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Booking Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "bookings"
                ],
                "summary": "Update Booking Details",
                "operationId": "update_booking_details_bookings__booking_id__put",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Booking Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookingUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "bookings"
                ],
                "summary": "Delete Booking",
                "operationId": "delete_booking_bookings__booking_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "booking_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Booking Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Booking"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/payments/": {
            "post": {
                "tags": [
                    "payments"
                ],
                "summary": "Create New Payment",
                "operationId": "create_new_payment_payments__post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ]
            }
        },
        "/payments/{payment_id}": {
            "get": {
                "tags": [
                    "payments"
                ],
                "summary": "Read Payment",
                "operationId": "read_payment_payments__payment_id__get",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "payment_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Payment Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "payments"
                ],
                "summary": "Delete Payment",
                "operationId": "delete_payment_payments__payment_id__delete",
                "security": [
                    {
                        "OAuth2PasswordBearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "payment_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "title": "Payment Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Body_login_for_access_token_token_post": {
                "properties": {
                    "grant_type": {
                        "anyOf": [
                            {
                                "type": "string",
                                "pattern": "password"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Grant Type"
                    },
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    },
                    "scope": {
                        "type": "string",
                        "title": "Scope",
                        "default": ""
                    },
                    "client_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Id"
                    },
                    "client_secret": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Client Secret"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "Body_login_for_access_token_token_post"
            },
            "Booking": {
                "properties": {
                    "property_id": {
                        "type": "integer",
                        "title": "Property Id"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Start Date"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "title": "End Date"
                    },
                    "status": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BookingStatus"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "default": "pending"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    },
                    "user_id": {
                        "type": "integer",
                        "title": "User Id"
                    }
                },
                "type": "object",
                "required": [
                    "property_id",
                    "start_date",
                    "end_date",
                    "id",
                    "created_at",
                    "user_id"
                ],
                "title": "Booking"
            },
            "BookingCreate": {
                "properties": {
                    "property_id": {
                        "type": "integer",
                        "title": "Property Id"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Start Date"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "title": "End Date"
                    },
                    "status": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BookingStatus"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "default": "pending"
                    }
                },
                "type": "object",
                "required": [
                    "property_id",
                    "start_date",
                    "end_date"
                ],
                "title": "BookingCreate"
            },
            "BookingStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "confirmed",
                    "cancelled"
                ],
                "title": "BookingStatus"
            },
            "BookingUpdate": {
                "properties": {
                    "status": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BookingStatus"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "start_date": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Start Date"
                    },
                    "end_date": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "End Date"
                    }
                },
                "type": "object",
                "title": "BookingUpdate"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "Payment": {
                "properties": {
                    "booking_id": {
                        "type": "integer",
                        "title": "Booking Id"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "status": {
                        "$ref": "#/components/schemas/PaymentStatus"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "booking_id",
                    "amount",
                    "status",
                    "id",
                    "created_at"
                ],
                "title": "Payment"
            },
            "PaymentCreate": {
                "properties": {
                    "booking_id": {
                        "type": "integer",
                        "title": "Booking Id"
                    },
                    "amount": {
                        "type": "number",
                        "title": "Amount"
                    },
                    "status": {
                        "$ref": "#/components/schemas/PaymentStatus"
                    }
                },
                "type": "object",
                "required": [
                    "booking_id",
                    "amount",
                    "status"
                ],
                "title": "PaymentCreate"
            },
            "PaymentStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "success",
                    "failed"
                ],
                "title": "PaymentStatus"
            },
            "Property": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "rooms": {
                        "type": "integer",
                        "title": "Rooms"
                    },
                    "price": {
                        "type": "number",
                        "title": "Price"
                    },
                    "location": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Location"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "owner_id": {
                        "type": "integer",
                        "title": "Owner Id"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "rooms",
                    "price",
                    "location",
                    "id",
                    "owner_id"
                ],
                "title": "Property"
            },
            "PropertyCreate": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "rooms": {
                        "type": "integer",
                        "title": "Rooms"
                    },
                    "price": {
                        "type": "number",
                        "title": "Price"
                    },
                    "location": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Location"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description",
                    "rooms",
                    "price",
                    "location"
                ],
                "title": "PropertyCreate"
            },
            "PropertyUpdate": {
                "properties": {
                    "name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Name"
                    },
                    "description": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Description"
                    },
                    "rooms": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Rooms"
                    },
                    "price": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Price"
                    },
                    "location": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Location"
                    }
                },
                "type": "object",
                "title": "PropertyUpdate"
            },
            "Role": {
                "type": "string",
                "enum": [
                    "user",
                    "owner",
                    "admin"
                ],
                "title": "Role"
            },
            "User": {
                "properties": {
                    "first_name": {
                        "type": "string",
                        "title": "First Name"
                    },
                    "last_name": {
                        "type": "string",
                        "title": "Last Name"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "default": "user"
                    },
                    "id": {
                        "type": "integer",
                        "title": "Id"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Created At"
                    }
                },
                "type": "object",
                "required": [
                    "first_name",
                    "last_name",
                    "email",
                    "id",
                    "created_at"
                ],
                "title": "User"
            },
            "UserBase": {
                "properties": {
                    "first_name": {
                        "type": "string",
                        "title": "First Name"
                    },
                    "last_name": {
                        "type": "string",
                        "title": "Last Name"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "default": "user"
                    }
                },
                "type": "object",
                "required": [
                    "first_name",
                    "last_name",
                    "email"
                ],
                "title": "UserBase"
            },
            "UserCreate": {
                "properties": {
                    "first_name": {
                        "type": "string",
                        "title": "First Name"
                    },
                    "last_name": {
                        "type": "string",
                        "title": "Last Name"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "title": "Email"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "default": "user"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "first_name",
                    "last_name",
                    "email",
                    "password"
                ],
                "title": "UserCreate"
            },
            "UserUpdate": {
                "properties": {
                    "first_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "First Name"
                    },
                    "last_name": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Last Name"
                    },
                    "email": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "email"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Email"
                    },
                    "role": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Role"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "password": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Password"
                    }
                },
                "type": "object",
                "title": "UserUpdate"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "OAuth2PasswordBearer": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "scopes": {},
                        "tokenUrl": "/token"
                    }
                }
            }
        }
    }
}


ДОДАТОК Д 
ФРАГМЕНТИ ПРОГРАМНОГО КОДУ
Логіка взаємодії серверної частини з БД

from sqlalchemy.ext.asyncio import AsyncSession
from app.models.user import User as UserModel
from app.schemas.user import UserCreate, UserUpdate, User
from sqlalchemy import select, delete
from app.core.security import get_password_hash, verify_password
from fastapi import HTTPException
from app.enums.user_role import Role

async def create_user(db: AsyncSession, user: UserCreate):
    """Create a new user."""
    user.password = get_password_hash(user.password)
    new_user = UserModel(**user.model_dump())
    db.add(new_user)
    await db.commit()
    return new_user

async def update_user(
    db: AsyncSession, user_id: int, user: UserUpdate, current_user: User
):
    """Update a user."""
    if user_id != current_user.id and current_user.role != Role.ADMIN:
        raise HTTPException(
            status_code=403, detail="You are not allowed to update this user."
        )
    query = select(UserModel).where(UserModel.id == user_id)
    result = await db.execute(query)
    db_user = result.scalar_one_or_none()
    if not db_user:
        raise HTTPException(status_code=404, detail="User not found")
    if user.password:
        user.password = get_password_hash(user.password)
    for key, value in user.model_dump(exclude_none=True).items():
        setattr(db_user, key, value)
    await db.commit()
    return db_user

async def delete_user(db: AsyncSession, user_id: int, current_user: User):
    """Delete a user."""
    if user_id != current_user.id and current_user.role != Role.ADMIN:
        raise HTTPException(
            status_code=403, detail="You are not allowed to delete this user."
        )
    query = delete(UserModel).where(UserModel.id == user_id).returning(UserModel)
    result = await db.execute(query)
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

async def get_user(db: AsyncSession, user_id: int):
    """Retrieve a user by ID."""
    query = select(UserModel).where(UserModel.id == user_id)
    result = await db.execute(query)
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

async def authenticate_user(db: AsyncSession, email: str, password: str):
    """Authenticate a user by email and password."""
    query = select(UserModel).where(UserModel.email == email)
    result = await db.execute(query)
    user = result.scalar_one_or_none()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    if not verify_password(password, user.password):
        raise HTTPException(status_code=401, detail="Incorrect password")
    return user

Логіка взаємодії серверної частини з клієнтами

from fastapi import APIRouter, Depends, HTTPException, status
from app.crud import user as user_crud
from app.schemas.user import UserCreate, User, UserUpdate, UserBase
from app.core.database import get_db
from app.dependencies import role_required, get_current_user
from sqlalchemy.ext.asyncio import AsyncSession
from app.enums.user_role import Role

router = APIRouter(
    prefix="/users",
    tags=["users"],
)

@router.get("/me", response_model=UserBase)
async def read_current_user(current_user: User = Depends(get_current_user)):
    """Retrieve the current authenticated user."""
    return current_user

@router.post("/", response_model=User)
async def create_user(
    user: UserCreate,
    db: AsyncSession = Depends(get_db),
):
    """Create a new user."""
    if user.role == Role.ADMIN:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="You are not allowed to create an admin user.",
        )
    return await user_crud.create_user(db, user)

@router.post("/admin", response_model=User)
async def create_admin_user(
    user: UserCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(role_required([Role.ADMIN])),
):
    """Create a new admin user."""
    return await user_crud.create_user(db, user)

@router.put("/{user_id}", response_model=User)
async def update_user(
    user_id: int,
    user: UserUpdate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    """Update a user."""
    return await user_crud.update_user(db, user_id, user, current_user)

@router.delete("/{user_id}", response_model=User)
async def delete_user(
    user_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    """Delete a user."""
    return await user_crud.delete_user(db, user_id, current_user)

ДОДАТОК Е 
ВІДЕО НА ЮТУБ

https://youtu.be/Ja-VDDsT8yk

