Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії
ЗВІТ
з дисципліни "Аналіз та рефакторинг коду"
до лабораторної роботи №2
на тему: "Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (API)"





Виконав ст. гр. ПЗПІ-22-2 
Шелехань Олександр Максимович

Перевірив
Ст. викл. кафедри ПІ 
Сокорчук Ігор Петрович







Харків 2024
МЕТА РОБОТИ

     Розробка бази даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
     
ХІД РОБОТИ

     Розробка проєкту почалась із побудови UML-діаграми прецедентів, що описує функціональні можливості системи та способи взаємодії користувачів із нею. Дана діаграма представлена у Додатку А.
     На наступному етапі було спроєктовано структуру бази даних та створено ER-діаграму (Додаток Б). На її основі реалізовано схему бази даних у PostgreSQL, що включає всі необхідні таблиці та зв'язки між ними. Візуальна структура бази даних наведена у Додатку В.
     Після цього була розроблена серверна частина проєкту з використанням Python і фреймворку FastAPI. Для роботи з базою даних застосовано SQLAlchemy як ORM, а Alembic використовувався для управління міграціями. Тестування API здійснювалось за допомогою Swagger UI, який автоматично генерується FastAPI (Додаток Г).
     Архітектура системи побудована на основі трирівневого підходу:
     1. Клієнтський рівень: HTTP-запити до API.
     2. Серверний рівень: FastAPI застосунок, який обробляє запити.
     3. Рівень даних: PostgreSQL для зберігання інформації, із застосуванням SQLAlchemy.
     Ключові технічні рішення:
     1. FastAPI був обраний як основний фреймворк через:
– Високу продуктивність і асинхронність;
– Простоту роботи з OpenAPI (Swagger UI);
– Інтеграцію з Pydantic для валідації;
– Гнучкий механізм обробки запитів.
     2. SQLAlchemy забезпечує:
– ORM для зручної роботи з таблицями бази даних;
– Можливість написання складних SQL-запитів;
– Інтеграцію з PostgreSQL.
     3. Alembic використовувався для:
– Створення та управління міграціями бази даних;
– Контролю версій змін у схемі бази даних.
     4. Валідація даних виконувалася на декількох рівнях:
– Pydantic для перевірки вхідних даних у DTO (Data Transfer Object);
– Вбудована валідація на рівні SQLAlchemy моделей (наприклад, унікальність та обов'язковість значень).
     5. PostgreSQL обрано як СУБД через:
– Надійність і стабільність;
– Підтримку складних запитів та реляційної структури даних;
– Масштабованість і відповідність стандартам SQL.
     Розроблений API забезпечує виконання CRUD-операцій (створення, читання, оновлення, видалення даних) та взаємодію з базою даних. Специфікація API представлена у Додатку Г.
     Тестування API здійснювалося за допомогою Swagger UI, що дозволило перевірити коректну роботу всіх ендпоінтів та валідацію даних.
     Ключові фрагменти коду, які демонструють:
     1. Логіку взаємодії серверної частини з базою даних через SQLAlchemy;
     2. Логіку взаємодії серверної частини з клієнтами через FastAPI; наведені в Додатку Д.
     Огляд функціональності системи представлено у відеодемонстрації, посилання на яку наведено у Додатку Е.
     
ВИСНОВКИ

     У ході виконання роботи було розроблено систему, яка забезпечує взаємодію між клієнтами та базою даних через REST API. Було створено UML-діаграму прецедентів, спроєктовано структуру бази даних і розроблено її ER-діаграму. На основі цих діаграм було реалізовано серверну частину за допомогою FastAPI, SQLAlchemy та Alembic. Також була створена документація API у Swagger UI та виконане тестування системи для перевірки її працездатності.


ДОДАТОК А
UML ДІАГРАМА ПРЕЦЕДЕНТІВ

Рисунок А - UML діаграма прецедентів


ДОДАТОК Б
ER ДІАГРАМА БАЗИ ДАНИХ

Рисунок Б - ER діаграма бази даних


ДОДАТОК В
ДІАГРАМА СТРУКТУРИ БАЗИ ДАНИХ

Рисунок В - Діаграма структури бази даних
ДОДАТОК Г
СПЕЦИФІКАЦІЯ API
  1 {
  2     "openapi": "3.1.0",
  3     "info": {
  4         "title": "FastAPI",
  5         "version": "0.1.0"
  6     },
  7     "paths": {
  8         "/users/me": {
  9             "get": {
 10                 "tags": [
 11                     "users"
 12                 ],
 13                 "summary": "Read Current User",
 14                 "description": "Retrieve the current authenticated user.",
 15                 "operationId": "read_current_user_users_me_get",
 16                 "responses": {
 17                     "200": {
 18                         "description": "Successful Response",
 19                         "content": {
 20                             "application/json": {
 21                                 "schema": {
 22                                     "$ref": "#/components/schemas/UserBase"
 23                                 }
 24                             }
 25                         }
 26                     }
 27                 },
 28                 "security": [
 29                     {
 30                         "OAuth2PasswordBearer": []
 31                     }
 32                 ]
 33             }
 34         },
 35         "/users/": {
 36             "post": {
 37                 "tags": [
 38                     "users"
 39                 ],
 40                 "summary": "Create User",
 41                 "description": "Create a new user.",
 42                 "operationId": "create_user_users__post",
 43                 "requestBody": {
 44                     "content": {
 45                         "application/json": {
 46                             "schema": {
 47                                 "$ref": "#/components/schemas/UserCreate"
 48                             }
 49                         }
 50                     },
 51                     "required": true
 52                 },
 53                 "responses": {
 54                     "200": {
 55                         "description": "Successful Response",
 56                         "content": {
 57                             "application/json": {
 58                                 "schema": {
 59                                     "$ref": "#/components/schemas/User"
 60                                 }
 61                             }
 62                         }
 63                     },
 64                     "422": {
 65                         "description": "Validation Error",
 66                         "content": {
 67                             "application/json": {
 68                                 "schema": {
 69                                     "$ref": "#/components/schemas/HTTPValidationError"
 70                                 }
 71                             }
 72                         }
 73                     }
 74                 }
 75             }
 76         },
 77         "/users/admin": {
 78             "post": {
 79                 "tags": [
 80                     "users"
 81                 ],
 82                 "summary": "Create Admin User",
 83                 "description": "Create a new admin user.",
 84                 "operationId": "create_admin_user_users_admin_post",
 85                 "requestBody": {
 86                     "content": {
 87                         "application/json": {
 88                             "schema": {
 89                                 "$ref": "#/components/schemas/UserCreate"
 90                             }
 91                         }
 92                     },
 93                     "required": true
 94                 },
 95                 "responses": {
 96                     "200": {
 97                         "description": "Successful Response",
 98                         "content": {
 99                             "application/json": {
100                                 "schema": {
101                                     "$ref": "#/components/schemas/User"
102                                 }
103                             }
104                         }
105                     },
106                     "422": {
107                         "description": "Validation Error",
108                         "content": {
109                             "application/json": {
110                                 "schema": {
111                                     "$ref": "#/components/schemas/HTTPValidationError"
112                                 }
113                             }
114                         }
115                     }
116                 },
117                 "security": [
118                     {
119                         "OAuth2PasswordBearer": []
120                     }
121                 ]
122             }
123         },
124         "/users/{user_id}": {
125             "put": {
126                 "tags": [
127                     "users"
128                 ],
129                 "summary": "Update User",
130                 "description": "Update a user.",
131                 "operationId": "update_user_users__user_id__put",
132                 "security": [
133                     {
134                         "OAuth2PasswordBearer": []
135                     }
136                 ],
137                 "parameters": [
138                     {
139                         "name": "user_id",
140                         "in": "path",
141                         "required": true,
142                         "schema": {
143                             "type": "integer",
144                             "title": "User Id"
145                         }
146                     }
147                 ],
148                 "requestBody": {
149                     "required": true,
150                     "content": {
151                         "application/json": {
152                             "schema": {
153                                 "$ref": "#/components/schemas/UserUpdate"
154                             }
155                         }
156                     }
157                 },
158                 "responses": {
159                     "200": {
160                         "description": "Successful Response",
161                         "content": {
162                             "application/json": {
163                                 "schema": {
164                                     "$ref": "#/components/schemas/User"
165                                 }
166                             }
167                         }
168                     },
169                     "422": {
170                         "description": "Validation Error",
171                         "content": {
172                             "application/json": {
173                                 "schema": {
174                                     "$ref": "#/components/schemas/HTTPValidationError"
175                                 }
176                             }
177                         }
178                     }
179                 }
180             },
181             "delete": {
182                 "tags": [
183                     "users"
184                 ],
185                 "summary": "Delete User",
186                 "description": "Delete a user.",
187                 "operationId": "delete_user_users__user_id__delete",
188                 "security": [
189                     {
190                         "OAuth2PasswordBearer": []
191                     }
192                 ],
193                 "parameters": [
194                     {
195                         "name": "user_id",
196                         "in": "path",
197                         "required": true,
198                         "schema": {
199                             "type": "integer",
200                             "title": "User Id"
201                         }
202                     }
203                 ],
204                 "responses": {
205                     "200": {
206                         "description": "Successful Response",
207                         "content": {
208                             "application/json": {
209                                 "schema": {
210                                     "$ref": "#/components/schemas/User"
211                                 }
212                             }
213                         }
214                     },
215                     "422": {
216                         "description": "Validation Error",
217                         "content": {
218                             "application/json": {
219                                 "schema": {
220                                     "$ref": "#/components/schemas/HTTPValidationError"
221                                 }
222                             }
223                         }
224                     }
225                 }
226             }
227         },
228         "/token": {
229             "post": {
230                 "tags": [
231                     "login"
232                 ],
233                 "summary": "Login For Access Token",
234                 "description": "Authenticate a user and return an access token.",
235                 "operationId": "login_for_access_token_token_post",
236                 "requestBody": {
237                     "content": {
238                         "application/x-www-form-urlencoded": {
239                             "schema": {
240                                 "$ref": "#/components/schemas/Body_login_for_access_token_token_post"
241                             }
242                         }
243                     },
244                     "required": true
245                 },
246                 "responses": {
247                     "200": {
248                         "description": "Successful Response",
249                         "content": {
250                             "application/json": {
251                                 "schema": {}
252                             }
253                         }
254                     },
255                     "422": {
256                         "description": "Validation Error",
257                         "content": {
258                             "application/json": {
259                                 "schema": {
260                                     "$ref": "#/components/schemas/HTTPValidationError"
261                                 }
262                             }
263                         }
264                     }
265                 }
266             }
267         },
268         "/properties/": {
269             "get": {
270                 "tags": [
271                     "properties"
272                 ],
273                 "summary": "Read Properties",
274                 "description": "Read all properties.",
275                 "operationId": "read_properties_properties__get",
276                 "responses": {
277                     "200": {
278                         "description": "Successful Response",
279                         "content": {
280                             "application/json": {
281                                 "schema": {
282                                     "items": {
283                                         "$ref": "#/components/schemas/Property"
284                                     },
285                                     "type": "array",
286                                     "title": "Response Read Properties Properties  Get"
287                                 }
288                             }
289                         }
290                     }
291                 }
292             },
293             "post": {
294                 "tags": [
295                     "properties"
296                 ],
297                 "summary": "Create Property",
298                 "description": "Create a new property.",
299                 "operationId": "create_property_properties__post",
300                 "requestBody": {
301                     "content": {
302                         "application/json": {
303                             "schema": {
304                                 "$ref": "#/components/schemas/PropertyCreate"
305                             }
306                         }
307                     },
308                     "required": true
309                 },
310                 "responses": {
311                     "200": {
312                         "description": "Successful Response",
313                         "content": {
314                             "application/json": {
315                                 "schema": {
316                                     "$ref": "#/components/schemas/Property"
317                                 }
318                             }
319                         }
320                     },
321                     "422": {
322                         "description": "Validation Error",
323                         "content": {
324                             "application/json": {
325                                 "schema": {
326                                     "$ref": "#/components/schemas/HTTPValidationError"
327                                 }
328                             }
329                         }
330                     }
331                 },
332                 "security": [
333                     {
334                         "OAuth2PasswordBearer": []
335                     }
336                 ]
337             }
338         },
339         "/properties/{property_id}": {
340             "get": {
341                 "tags": [
342                     "properties"
343                 ],
344                 "summary": "Read Property",
345                 "description": "Read a property by ID.",
346                 "operationId": "read_property_properties__property_id__get",
347                 "parameters": [
348                     {
349                         "name": "property_id",
350                         "in": "path",
351                         "required": true,
352                         "schema": {
353                             "type": "integer",
354                             "title": "Property Id"
355                         }
356                     }
357                 ],
358                 "responses": {
359                     "200": {
360                         "description": "Successful Response",
361                         "content": {
362                             "application/json": {
363                                 "schema": {
364                                     "$ref": "#/components/schemas/Property"
365                                 }
366                             }
367                         }
368                     },
369                     "422": {
370                         "description": "Validation Error",
371                         "content": {
372                             "application/json": {
373                                 "schema": {
374                                     "$ref": "#/components/schemas/HTTPValidationError"
375                                 }
376                             }
377                         }
378                     }
379                 }
380             },
381             "put": {
382                 "tags": [
383                     "properties"
384                 ],
385                 "summary": "Update Property",
386                 "description": "Update an existing property.",
387                 "operationId": "update_property_properties__property_id__put",
388                 "security": [
389                     {
390                         "OAuth2PasswordBearer": []
391                     }
392                 ],
393                 "parameters": [
394                     {
395                         "name": "property_id",
396                         "in": "path",
397                         "required": true,
398                         "schema": {
399                             "type": "integer",
400                             "title": "Property Id"
401                         }
402                     }
403                 ],
404                 "requestBody": {
405                     "required": true,
406                     "content": {
407                         "application/json": {
408                             "schema": {
409                                 "$ref": "#/components/schemas/PropertyUpdate"
410                             }
411                         }
412                     }
413                 },
414                 "responses": {
415                     "200": {
416                         "description": "Successful Response",
417                         "content": {
418                             "application/json": {
419                                 "schema": {
420                                     "$ref": "#/components/schemas/Property"
421                                 }
422                             }
423                         }
424                     },
425                     "422": {
426                         "description": "Validation Error",
427                         "content": {
428                             "application/json": {
429                                 "schema": {
430                                     "$ref": "#/components/schemas/HTTPValidationError"
431                                 }
432                             }
433                         }
434                     }
435                 }
436             },
437             "delete": {
438                 "tags": [
439                     "properties"
440                 ],
441                 "summary": "Delete Property",
442                 "description": "Delete a property",
443                 "operationId": "delete_property_properties__property_id__delete",
444                 "security": [
445                     {
446                         "OAuth2PasswordBearer": []
447                     }
448                 ],
449                 "parameters": [
450                     {
451                         "name": "property_id",
452                         "in": "path",
453                         "required": true,
454                         "schema": {
455                             "type": "integer",
456                             "title": "Property Id"
457                         }
458                     }
459                 ],
460                 "responses": {
461                     "200": {
462                         "description": "Successful Response",
463                         "content": {
464                             "application/json": {
465                                 "schema": {
466                                     "$ref": "#/components/schemas/Property"
467                                 }
468                             }
469                         }
470                     },
471                     "422": {
472                         "description": "Validation Error",
473                         "content": {
474                             "application/json": {
475                                 "schema": {
476                                     "$ref": "#/components/schemas/HTTPValidationError"
477                                 }
478                             }
479                         }
480                     }
481                 }
482             }
483         },
484         "/bookings/": {
485             "post": {
486                 "tags": [
487                     "bookings"
488                 ],
489                 "summary": "Create New Booking",
490                 "operationId": "create_new_booking_bookings__post",
491                 "requestBody": {
492                     "content": {
493                         "application/json": {
494                             "schema": {
495                                 "$ref": "#/components/schemas/BookingCreate"
496                             }
497                         }
498                     },
499                     "required": true
500                 },
501                 "responses": {
502                     "200": {
503                         "description": "Successful Response",
504                         "content": {
505                             "application/json": {
506                                 "schema": {
507                                     "$ref": "#/components/schemas/Booking"
508                                 }
509                             }
510                         }
511                     },
512                     "422": {
513                         "description": "Validation Error",
514                         "content": {
515                             "application/json": {
516                                 "schema": {
517                                     "$ref": "#/components/schemas/HTTPValidationError"
518                                 }
519                             }
520                         }
521                     }
522                 },
523                 "security": [
524                     {
525                         "OAuth2PasswordBearer": []
526                     }
527                 ]
528             }
529         },
530         "/bookings/{booking_id}": {
531             "get": {
532                 "tags": [
533                     "bookings"
534                 ],
535                 "summary": "Read Booking",
536                 "operationId": "read_booking_bookings__booking_id__get",
537                 "security": [
538                     {
539                         "OAuth2PasswordBearer": []
540                     }
541                 ],
542                 "parameters": [
543                     {
544                         "name": "booking_id",
545                         "in": "path",
546                         "required": true,
547                         "schema": {
548                             "type": "integer",
549                             "title": "Booking Id"
550                         }
551                     }
552                 ],
553                 "responses": {
554                     "200": {
555                         "description": "Successful Response",
556                         "content": {
557                             "application/json": {
558                                 "schema": {
559                                     "$ref": "#/components/schemas/Booking"
560                                 }
561                             }
562                         }
563                     },
564                     "422": {
565                         "description": "Validation Error",
566                         "content": {
567                             "application/json": {
568                                 "schema": {
569                                     "$ref": "#/components/schemas/HTTPValidationError"
570                                 }
571                             }
572                         }
573                     }
574                 }
575             },
576             "put": {
577                 "tags": [
578                     "bookings"
579                 ],
580                 "summary": "Update Booking Details",
581                 "operationId": "update_booking_details_bookings__booking_id__put",
582                 "security": [
583                     {
584                         "OAuth2PasswordBearer": []
585                     }
586                 ],
587                 "parameters": [
588                     {
589                         "name": "booking_id",
590                         "in": "path",
591                         "required": true,
592                         "schema": {
593                             "type": "integer",
594                             "title": "Booking Id"
595                         }
596                     }
597                 ],
598                 "requestBody": {
599                     "required": true,
600                     "content": {
601                         "application/json": {
602                             "schema": {
603                                 "$ref": "#/components/schemas/BookingUpdate"
604                             }
605                         }
606                     }
607                 },
608                 "responses": {
609                     "200": {
610                         "description": "Successful Response",
611                         "content": {
612                             "application/json": {
613                                 "schema": {
614                                     "$ref": "#/components/schemas/Booking"
615                                 }
616                             }
617                         }
618                     },
619                     "422": {
620                         "description": "Validation Error",
621                         "content": {
622                             "application/json": {
623                                 "schema": {
624                                     "$ref": "#/components/schemas/HTTPValidationError"
625                                 }
626                             }
627                         }
628                     }
629                 }
630             },
631             "delete": {
632                 "tags": [
633                     "bookings"
634                 ],
635                 "summary": "Delete Booking",
636                 "operationId": "delete_booking_bookings__booking_id__delete",
637                 "security": [
638                     {
639                         "OAuth2PasswordBearer": []
640                     }
641                 ],
642                 "parameters": [
643                     {
644                         "name": "booking_id",
645                         "in": "path",
646                         "required": true,
647                         "schema": {
648                             "type": "integer",
649                             "title": "Booking Id"
650                         }
651                     }
652                 ],
653                 "responses": {
654                     "200": {
655                         "description": "Successful Response",
656                         "content": {
657                             "application/json": {
658                                 "schema": {
659                                     "$ref": "#/components/schemas/Booking"
660                                 }
661                             }
662                         }
663                     },
664                     "422": {
665                         "description": "Validation Error",
666                         "content": {
667                             "application/json": {
668                                 "schema": {
669                                     "$ref": "#/components/schemas/HTTPValidationError"
670                                 }
671                             }
672                         }
673                     }
674                 }
675             }
676         },
677         "/payments/": {
678             "post": {
679                 "tags": [
680                     "payments"
681                 ],
682                 "summary": "Create New Payment",
683                 "operationId": "create_new_payment_payments__post",
684                 "requestBody": {
685                     "content": {
686                         "application/json": {
687                             "schema": {
688                                 "$ref": "#/components/schemas/PaymentCreate"
689                             }
690                         }
691                     },
692                     "required": true
693                 },
694                 "responses": {
695                     "200": {
696                         "description": "Successful Response",
697                         "content": {
698                             "application/json": {
699                                 "schema": {
700                                     "$ref": "#/components/schemas/Payment"
701                                 }
702                             }
703                         }
704                     },
705                     "422": {
706                         "description": "Validation Error",
707                         "content": {
708                             "application/json": {
709                                 "schema": {
710                                     "$ref": "#/components/schemas/HTTPValidationError"
711                                 }
712                             }
713                         }
714                     }
715                 },
716                 "security": [
717                     {
718                         "OAuth2PasswordBearer": []
719                     }
720                 ]
721             }
722         },
723         "/payments/{payment_id}": {
724             "get": {
725                 "tags": [
726                     "payments"
727                 ],
728                 "summary": "Read Payment",
729                 "operationId": "read_payment_payments__payment_id__get",
730                 "security": [
731                     {
732                         "OAuth2PasswordBearer": []
733                     }
734                 ],
735                 "parameters": [
736                     {
737                         "name": "payment_id",
738                         "in": "path",
739                         "required": true,
740                         "schema": {
741                             "type": "integer",
742                             "title": "Payment Id"
743                         }
744                     }
745                 ],
746                 "responses": {
747                     "200": {
748                         "description": "Successful Response",
749                         "content": {
750                             "application/json": {
751                                 "schema": {
752                                     "$ref": "#/components/schemas/Payment"
753                                 }
754                             }
755                         }
756                     },
757                     "422": {
758                         "description": "Validation Error",
759                         "content": {
760                             "application/json": {
761                                 "schema": {
762                                     "$ref": "#/components/schemas/HTTPValidationError"
763                                 }
764                             }
765                         }
766                     }
767                 }
768             },
769             "delete": {
770                 "tags": [
771                     "payments"
772                 ],
773                 "summary": "Delete Payment",
774                 "operationId": "delete_payment_payments__payment_id__delete",
775                 "security": [
776                     {
777                         "OAuth2PasswordBearer": []
778                     }
779                 ],
780                 "parameters": [
781                     {
782                         "name": "payment_id",
783                         "in": "path",
784                         "required": true,
785                         "schema": {
786                             "type": "integer",
787                             "title": "Payment Id"
788                         }
789                     }
790                 ],
791                 "responses": {
792                     "200": {
793                         "description": "Successful Response",
794                         "content": {
795                             "application/json": {
796                                 "schema": {}
797                             }
798                         }
799                     },
800                     "422": {
801                         "description": "Validation Error",
802                         "content": {
803                             "application/json": {
804                                 "schema": {
805                                     "$ref": "#/components/schemas/HTTPValidationError"
806                                 }
807                             }
808                         }
809                     }
810                 }
811             }
812         }
813     },
814     "components": {
815         "schemas": {
816             "Body_login_for_access_token_token_post": {
817                 "properties": {
818                     "grant_type": {
819                         "anyOf": [
820                             {
821                                 "type": "string",
822                                 "pattern": "password"
823                             },
824                             {
825                                 "type": "null"
826                             }
827                         ],
828                         "title": "Grant Type"
829                     },
830                     "username": {
831                         "type": "string",
832                         "title": "Username"
833                     },
834                     "password": {
835                         "type": "string",
836                         "title": "Password"
837                     },
838                     "scope": {
839                         "type": "string",
840                         "title": "Scope",
841                         "default": ""
842                     },
843                     "client_id": {
844                         "anyOf": [
845                             {
846                                 "type": "string"
847                             },
848                             {
849                                 "type": "null"
850                             }
851                         ],
852                         "title": "Client Id"
853                     },
854                     "client_secret": {
855                         "anyOf": [
856                             {
857                                 "type": "string"
858                             },
859                             {
860                                 "type": "null"
861                             }
862                         ],
863                         "title": "Client Secret"
864                     }
865                 },
866                 "type": "object",
867                 "required": [
868                     "username",
869                     "password"
870                 ],
871                 "title": "Body_login_for_access_token_token_post"
872             },
873             "Booking": {
874                 "properties": {
875                     "property_id": {
876                         "type": "integer",
877                         "title": "Property Id"
878                     },
879                     "start_date": {
880                         "type": "string",
881                         "format": "date",
882                         "title": "Start Date"
883                     },
884                     "end_date": {
885                         "type": "string",
886                         "format": "date",
887                         "title": "End Date"
888                     },
889                     "status": {
890                         "anyOf": [
891                             {
892                                 "$ref": "#/components/schemas/BookingStatus"
893                             },
894                             {
895                                 "type": "null"
896                             }
897                         ],
898                         "default": "pending"
899                     },
900                     "id": {
901                         "type": "integer",
902                         "title": "Id"
903                     },
904                     "created_at": {
905                         "type": "string",
906                         "format": "date-time",
907                         "title": "Created At"
908                     },
909                     "user_id": {
910                         "type": "integer",
911                         "title": "User Id"
912                     }
913                 },
914                 "type": "object",
915                 "required": [
916                     "property_id",
917                     "start_date",
918                     "end_date",
919                     "id",
920                     "created_at",
921                     "user_id"
922                 ],
923                 "title": "Booking"
924             },
925             "BookingCreate": {
926                 "properties": {
927                     "property_id": {
928                         "type": "integer",
929                         "title": "Property Id"
930                     },
931                     "start_date": {
932                         "type": "string",
933                         "format": "date",
934                         "title": "Start Date"
935                     },
936                     "end_date": {
937                         "type": "string",
938                         "format": "date",
939                         "title": "End Date"
940                     },
941                     "status": {
942                         "anyOf": [
943                             {
944                                 "$ref": "#/components/schemas/BookingStatus"
945                             },
946                             {
947                                 "type": "null"
948                             }
949                         ],
950                         "default": "pending"
951                     }
952                 },
953                 "type": "object",
954                 "required": [
955                     "property_id",
956                     "start_date",
957                     "end_date"
958                 ],
959                 "title": "BookingCreate"
960             },
961             "BookingStatus": {
962                 "type": "string",
963                 "enum": [
964                     "pending",
965                     "confirmed",
966                     "cancelled"
967                 ],
968                 "title": "BookingStatus"
969             },
970             "BookingUpdate": {
971                 "properties": {
972                     "status": {
973                         "anyOf": [
974                             {
975                                 "$ref": "#/components/schemas/BookingStatus"
976                             },
977                             {
978                                 "type": "null"
979                             }
980                         ]
981                     },
982                     "start_date": {
983                         "anyOf": [
984                             {
985                                 "type": "string",
986                                 "format": "date"
987                             },
988                             {
989                                 "type": "null"
990                             }
991                         ],
992                         "title": "Start Date"
993                     },
994                     "end_date": {
995                         "anyOf": [
996                             {
997                                 "type": "string",
998                                 "format": "date"
999                             },
1000                             {
1001                                 "type": "null"
1002                             }
1003                         ],
1004                         "title": "End Date"
1005                     }
1006                 },
1007                 "type": "object",
1008                 "title": "BookingUpdate"
1009             },
1010             "HTTPValidationError": {
1011                 "properties": {
1012                     "detail": {
1013                         "items": {
1014                             "$ref": "#/components/schemas/ValidationError"
1015                         },
1016                         "type": "array",
1017                         "title": "Detail"
1018                     }
1019                 },
1020                 "type": "object",
1021                 "title": "HTTPValidationError"
1022             },
1023             "Payment": {
1024                 "properties": {
1025                     "booking_id": {
1026                         "type": "integer",
1027                         "title": "Booking Id"
1028                     },
1029                     "amount": {
1030                         "type": "number",
1031                         "title": "Amount"
1032                     },
1033                     "status": {
1034                         "$ref": "#/components/schemas/PaymentStatus"
1035                     },
1036                     "id": {
1037                         "type": "integer",
1038                         "title": "Id"
1039                     },
1040                     "created_at": {
1041                         "type": "string",
1042                         "format": "date-time",
1043                         "title": "Created At"
1044                     }
1045                 },
1046                 "type": "object",
1047                 "required": [
1048                     "booking_id",
1049                     "amount",
1050                     "status",
1051                     "id",
1052                     "created_at"
1053                 ],
1054                 "title": "Payment"
1055             },
1056             "PaymentCreate": {
1057                 "properties": {
1058                     "booking_id": {
1059                         "type": "integer",
1060                         "title": "Booking Id"
1061                     },
1062                     "amount": {
1063                         "type": "number",
1064                         "title": "Amount"
1065                     },
1066                     "status": {
1067                         "$ref": "#/components/schemas/PaymentStatus"
1068                     }
1069                 },
1070                 "type": "object",
1071                 "required": [
1072                     "booking_id",
1073                     "amount",
1074                     "status"
1075                 ],
1076                 "title": "PaymentCreate"
1077             },
1078             "PaymentStatus": {
1079                 "type": "string",
1080                 "enum": [
1081                     "pending",
1082                     "success",
1083                     "failed"
1084                 ],
1085                 "title": "PaymentStatus"
1086             },
1087             "Property": {
1088                 "properties": {
1089                     "name": {
1090                         "type": "string",
1091                         "title": "Name"
1092                     },
1093                     "description": {
1094                         "anyOf": [
1095                             {
1096                                 "type": "string"
1097                             },
1098                             {
1099                                 "type": "null"
1100                             }
1101                         ],
1102                         "title": "Description"
1103                     },
1104                     "rooms": {
1105                         "type": "integer",
1106                         "title": "Rooms"
1107                     },
1108                     "price": {
1109                         "type": "number",
1110                         "title": "Price"
1111                     },
1112                     "location": {
1113                         "anyOf": [
1114                             {
1115                                 "type": "string"
1116                             },
1117                             {
1118                                 "type": "null"
1119                             }
1120                         ],
1121                         "title": "Location"
1122                     },
1123                     "id": {
1124                         "type": "integer",
1125                         "title": "Id"
1126                     },
1127                     "owner_id": {
1128                         "type": "integer",
1129                         "title": "Owner Id"
1130                     }
1131                 },
1132                 "type": "object",
1133                 "required": [
1134                     "name",
1135                     "description",
1136                     "rooms",
1137                     "price",
1138                     "location",
1139                     "id",
1140                     "owner_id"
1141                 ],
1142                 "title": "Property"
1143             },
1144             "PropertyCreate": {
1145                 "properties": {
1146                     "name": {
1147                         "type": "string",
1148                         "title": "Name"
1149                     },
1150                     "description": {
1151                         "anyOf": [
1152                             {
1153                                 "type": "string"
1154                             },
1155                             {
1156                                 "type": "null"
1157                             }
1158                         ],
1159                         "title": "Description"
1160                     },
1161                     "rooms": {
1162                         "type": "integer",
1163                         "title": "Rooms"
1164                     },
1165                     "price": {
1166                         "type": "number",
1167                         "title": "Price"
1168                     },
1169                     "location": {
1170                         "anyOf": [
1171                             {
1172                                 "type": "string"
1173                             },
1174                             {
1175                                 "type": "null"
1176                             }
1177                         ],
1178                         "title": "Location"
1179                     }
1180                 },
1181                 "type": "object",
1182                 "required": [
1183                     "name",
1184                     "description",
1185                     "rooms",
1186                     "price",
1187                     "location"
1188                 ],
1189                 "title": "PropertyCreate"
1190             },
1191             "PropertyUpdate": {
1192                 "properties": {
1193                     "name": {
1194                         "anyOf": [
1195                             {
1196                                 "type": "string"
1197                             },
1198                             {
1199                                 "type": "null"
1200                             }
1201                         ],
1202                         "title": "Name"
1203                     },
1204                     "description": {
1205                         "anyOf": [
1206                             {
1207                                 "type": "string"
1208                             },
1209                             {
1210                                 "type": "null"
1211                             }
1212                         ],
1213                         "title": "Description"
1214                     },
1215                     "rooms": {
1216                         "anyOf": [
1217                             {
1218                                 "type": "integer"
1219                             },
1220                             {
1221                                 "type": "null"
1222                             }
1223                         ],
1224                         "title": "Rooms"
1225                     },
1226                     "price": {
1227                         "anyOf": [
1228                             {
1229                                 "type": "number"
1230                             },
1231                             {
1232                                 "type": "null"
1233                             }
1234                         ],
1235                         "title": "Price"
1236                     },
1237                     "location": {
1238                         "anyOf": [
1239                             {
1240                                 "type": "string"
1241                             },
1242                             {
1243                                 "type": "null"
1244                             }
1245                         ],
1246                         "title": "Location"
1247                     }
1248                 },
1249                 "type": "object",
1250                 "title": "PropertyUpdate"
1251             },
1252             "Role": {
1253                 "type": "string",
1254                 "enum": [
1255                     "user",
1256                     "owner",
1257                     "admin"
1258                 ],
1259                 "title": "Role"
1260             },
1261             "User": {
1262                 "properties": {
1263                     "first_name": {
1264                         "type": "string",
1265                         "title": "First Name"
1266                     },
1267                     "last_name": {
1268                         "type": "string",
1269                         "title": "Last Name"
1270                     },
1271                     "email": {
1272                         "type": "string",
1273                         "format": "email",
1274                         "title": "Email"
1275                     },
1276                     "role": {
1277                         "anyOf": [
1278                             {
1279                                 "$ref": "#/components/schemas/Role"
1280                             },
1281                             {
1282                                 "type": "null"
1283                             }
1284                         ],
1285                         "default": "user"
1286                     },
1287                     "id": {
1288                         "type": "integer",
1289                         "title": "Id"
1290                     },
1291                     "created_at": {
1292                         "type": "string",
1293                         "format": "date-time",
1294                         "title": "Created At"
1295                     }
1296                 },
1297                 "type": "object",
1298                 "required": [
1299                     "first_name",
1300                     "last_name",
1301                     "email",
1302                     "id",
1303                     "created_at"
1304                 ],
1305                 "title": "User"
1306             },
1307             "UserBase": {
1308                 "properties": {
1309                     "first_name": {
1310                         "type": "string",
1311                         "title": "First Name"
1312                     },
1313                     "last_name": {
1314                         "type": "string",
1315                         "title": "Last Name"
1316                     },
1317                     "email": {
1318                         "type": "string",
1319                         "format": "email",
1320                         "title": "Email"
1321                     },
1322                     "role": {
1323                         "anyOf": [
1324                             {
1325                                 "$ref": "#/components/schemas/Role"
1326                             },
1327                             {
1328                                 "type": "null"
1329                             }
1330                         ],
1331                         "default": "user"
1332                     }
1333                 },
1334                 "type": "object",
1335                 "required": [
1336                     "first_name",
1337                     "last_name",
1338                     "email"
1339                 ],
1340                 "title": "UserBase"
1341             },
1342             "UserCreate": {
1343                 "properties": {
1344                     "first_name": {
1345                         "type": "string",
1346                         "title": "First Name"
1347                     },
1348                     "last_name": {
1349                         "type": "string",
1350                         "title": "Last Name"
1351                     },
1352                     "email": {
1353                         "type": "string",
1354                         "format": "email",
1355                         "title": "Email"
1356                     },
1357                     "role": {
1358                         "anyOf": [
1359                             {
1360                                 "$ref": "#/components/schemas/Role"
1361                             },
1362                             {
1363                                 "type": "null"
1364                             }
1365                         ],
1366                         "default": "user"
1367                     },
1368                     "password": {
1369                         "type": "string",
1370                         "title": "Password"
1371                     }
1372                 },
1373                 "type": "object",
1374                 "required": [
1375                     "first_name",
1376                     "last_name",
1377                     "email",
1378                     "password"
1379                 ],
1380                 "title": "UserCreate"
1381             },
1382             "UserUpdate": {
1383                 "properties": {
1384                     "first_name": {
1385                         "anyOf": [
1386                             {
1387                                 "type": "string"
1388                             },
1389                             {
1390                                 "type": "null"
1391                             }
1392                         ],
1393                         "title": "First Name"
1394                     },
1395                     "last_name": {
1396                         "anyOf": [
1397                             {
1398                                 "type": "string"
1399                             },
1400                             {
1401                                 "type": "null"
1402                             }
1403                         ],
1404                         "title": "Last Name"
1405                     },
1406                     "email": {
1407                         "anyOf": [
1408                             {
1409                                 "type": "string",
1410                                 "format": "email"
1411                             },
1412                             {
1413                                 "type": "null"
1414                             }
1415                         ],
1416                         "title": "Email"
1417                     },
1418                     "role": {
1419                         "anyOf": [
1420                             {
1421                                 "$ref": "#/components/schemas/Role"
1422                             },
1423                             {
1424                                 "type": "null"
1425                             }
1426                         ]
1427                     },
1428                     "password": {
1429                         "anyOf": [
1430                             {
1431                                 "type": "string"
1432                             },
1433                             {
1434                                 "type": "null"
1435                             }
1436                         ],
1437                         "title": "Password"
1438                     }
1439                 },
1440                 "type": "object",
1441                 "title": "UserUpdate"
1442             },
1443             "ValidationError": {
1444                 "properties": {
1445                     "loc": {
1446                         "items": {
1447                             "anyOf": [
1448                                 {
1449                                     "type": "string"
1450                                 },
1451                                 {
1452                                     "type": "integer"
1453                                 }
1454                             ]
1455                         },
1456                         "type": "array",
1457                         "title": "Location"
1458                     },
1459                     "msg": {
1460                         "type": "string",
1461                         "title": "Message"
1462                     },
1463                     "type": {
1464                         "type": "string",
1465                         "title": "Error Type"
1466                     }
1467                 },
1468                 "type": "object",
1469                 "required": [
1470                     "loc",
1471                     "msg",
1472                     "type"
1473                 ],
1474                 "title": "ValidationError"
1475             }
1476         },
1477         "securitySchemes": {
1478             "OAuth2PasswordBearer": {
1479                 "type": "oauth2",
1480                 "flows": {
1481                     "password": {
1482                         "scopes": {},
1483                         "tokenUrl": "/token"
1484                     }
1485                 }
1486             }
1487         }
1488     }
1489 }



ДОДАТОК Д 
ФРАГМЕНТИ ПРОГРАМНОГО КОДУ
Логіка взаємодії серверної частини з БД

  1 from sqlalchemy.ext.asyncio import AsyncSession
  2 from app.models.user import User as UserModel
  3 from app.schemas.user import UserCreate, UserUpdate, User
  4 from sqlalchemy import select, delete
  5 from app.core.security import get_password_hash, verify_password
  6 from fastapi import HTTPException
  7 from app.enums.user_role import Role
  8 
  9 
 10 async def create_user(db: AsyncSession, user: UserCreate):
 11     """Create a new user."""
 12     user.password = get_password_hash(user.password)
 13     new_user = UserModel(**user.model_dump())
 14     db.add(new_user)
 15     await db.commit()
 16     return new_user
 17 
 18 
 19 async def update_user(
 20     db: AsyncSession, user_id: int, user: UserUpdate, current_user: User
 21 ):
 22     """Update a user."""
 23     if user_id != current_user.id and current_user.role != Role.ADMIN:
 24         raise HTTPException(
 25             status_code=403, detail="You are not allowed to update this user."
 26         )
 27     query = select(UserModel).where(UserModel.id == user_id)
 28     result = await db.execute(query)
 29     db_user = result.scalar_one_or_none()
 30     if not db_user:
 31         raise HTTPException(status_code=404, detail="User not found")
 32     if user.password:
 33         user.password = get_password_hash(user.password)
 34     for key, value in user.model_dump(exclude_none=True).items():
 35         setattr(db_user, key, value)
 36     await db.commit()
 37     return db_user
 38 
 39 
 40 async def delete_user(db: AsyncSession, user_id: int, current_user: User):
 41     """Delete a user."""
 42     if user_id != current_user.id and current_user.role != Role.ADMIN:
 43         raise HTTPException(
 44             status_code=403, detail="You are not allowed to delete this user."
 45         )
 46     query = delete(UserModel).where(UserModel.id == user_id).returning(UserModel)
 47     result = await db.execute(query)
 48     user = result.scalar_one_or_none()
 49     if not user:
 50         raise HTTPException(status_code=404, detail="User not found")
 51     return user
 52 
 53 
 54 async def get_user(db: AsyncSession, user_id: int):
 55     """Retrieve a user by ID."""
 56     query = select(UserModel).where(UserModel.id == user_id)
 57     result = await db.execute(query)
 58     user = result.scalar_one_or_none()
 59     if not user:
 60         raise HTTPException(status_code=404, detail="User not found")
 61     return user
 62 
 63 
 64 async def authenticate_user(db: AsyncSession, email: str, password: str):
 65     """Authenticate a user by email and password."""
 66     query = select(UserModel).where(UserModel.email == email)
 67     result = await db.execute(query)
 68     user = result.scalar_one_or_none()
 69     if not user:
 70         raise HTTPException(status_code=404, detail="User not found")
 71     if not verify_password(password, user.password):
 72         raise HTTPException(status_code=401, detail="Incorrect password")
 73     return user

Логіка взаємодії серверної частини з клієнтами

  1 from fastapi import APIRouter, Depends, HTTPException, status
  2 from app.crud import user as user_crud
  3 from app.schemas.user import UserCreate, User, UserUpdate, UserBase
  4 from app.core.database import get_db
  5 from app.dependencies import role_required, get_current_user
  6 from sqlalchemy.ext.asyncio import AsyncSession
  7 from app.enums.user_role import Role
  8 
  9 router = APIRouter(
 10     prefix="/users",
 11     tags=["users"],
 12 )
 13 
 14 
 15 @router.get("/me", response_model=UserBase)
 16 async def read_current_user(current_user: User = Depends(get_current_user)):
 17     """Retrieve the current authenticated user."""
 18     return current_user
 19 
 20 
 21 @router.post("/", response_model=User)
 22 async def create_user(
 23     user: UserCreate,
 24     db: AsyncSession = Depends(get_db),
 25 ):
 26     """Create a new user."""
 27     if user.role == Role.ADMIN:
 28         raise HTTPException(
 29             status_code=status.HTTP_403_FORBIDDEN,
 30             detail="You are not allowed to create an admin user.",
 31         )
 32     return await user_crud.create_user(db, user)
 33 
 34 
 35 @router.post("/admin", response_model=User)
 36 async def create_admin_user(
 37     user: UserCreate,
 38     db: AsyncSession = Depends(get_db),
 39     current_user: User = Depends(role_required([Role.ADMIN])),
 40 ):
 41     """Create a new admin user."""
 42     return await user_crud.create_user(db, user)
 43 
 44 
 45 @router.put("/{user_id}", response_model=User)
 46 async def update_user(
 47     user_id: int,
 48     user: UserUpdate,
 49     db: AsyncSession = Depends(get_db),
 50     current_user: User = Depends(get_current_user),
 51 ):
 52     """Update a user."""
 53     return await user_crud.update_user(db, user_id, user, current_user)
 54 
 55 
 56 @router.delete("/{user_id}", response_model=User)
 57 async def delete_user(
 58     user_id: int,
 59     db: AsyncSession = Depends(get_db),
 60     current_user: User = Depends(get_current_user),
 61 ):
 62     """Delete a user."""
 63     return await user_crud.delete_user(db, user_id, current_user)

ДОДАТОК Е 
ВІДЕО НА ЮТУБ

https://youtu.be/Ja-VDDsT8yk

2


